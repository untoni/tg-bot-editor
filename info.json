		Бібліотека, що дозволить просто і швидко створювати менюшки (вікна) і їх логіку для телеграм ботів.
		Виглядає як одна велика json база даних, в якій зберігаються всі налаштування для відображання менюшок тг-боту


				ВИГЛЯД СТРУКТУР

"window": {	//				-		вікно

			//  Аргументи вікна
	"text": "",   //		-	текст вікна
	"func": "",   //[]		-	функція що виконується при відкриті цього вікна
	"buttons": [],//		-	набір кнопок вікна
	"image": ""   //[]		-	зображення вікна
}

"buttons": [//				-		набір кнопок вікна

	{		//				-		кнопка

			//  Аргументи кнопки
		"button": "",//		-	посилання на шаблон кнопки
		"text": "",	 //		-	текст кнопки
		"goTo": "",	 //		-	переходить на вікно при натиску
		"howOpen": "",//	-	як переходити на наступне вікно
		"func": "",  //[]	-	функція що виконається при натиску
		"return": "",//		-	повертає РЕЗУЛЬТАТ у наступне вікно
	}

	[	//					-		рядок кнопок, зберігає в собі декілька послідовних кнопок
		{
			//	Одна кнопка
		},
		{
			//	Друга кнопка
		}
	]
]



				ОПИС КОЖНОГО АРГУМЕНТУ

"text"
	-	Аргумент тексту, зберігає текст.
		Через "%/" (%/lang/hello.) можна вставляти в текст ШАБЛОНИ ТЕКСТУ з папок,
		"lang" - це змінна, в якій зберігається мова користувача, що дозволяє вибрати папку з реплікою на МОВІ КОРИСТУВАЧА.
		Звичайний текст можна чередувати з ШАБЛОНАМИ (" %/lang/hello. %/-user/name., how are you? %/lang/bye.. "), крапка в кінці обов'язкова, щоб відокремити посилання від тексту 
		"%/-"  дозволяє повернутися до головного вузла папок і вже відносно нього вікривати потрібну папку. Глобальна папка "user" зберігає інформацію про користувача
			(АЛЕ не можна вставляти у текст все з глобальних папок "windows", "button", "func")

		У тексті шаблону теж може бути вставлене посилання на текст з іншого шаблону (АЛЕ не на самого себе).		

"goTo"
	-	Шлях до вікна, на яке треба переслати
		Можна як вписати унікальну назву вікна ("startWindow"), що знаходиться у глобальному вузлі "windows",
		так і прописати шлях до якогось вікна ("start/first").

		"/-back" повертає на минуле вікно


"howOpen"
	-	Вказує як вікривати наступне вікно.
		Має три переметри "add", "change" і "delete", які вказують як відкривати наступне вікно, 
			- 	"add" додає вікно
			-	"change" заміняє вікно на нове
			-	"delete" видаляє вікно


"func"
	-	Виконує функції, посилаючись на них.
		Щоб вказати конкретну функцію, треба прописати її шлях ("math/sum"), чи якщо вона знаходиться у глобальному вузлі "func", можна прописати ("globalFunc1").
		Деякі функції можуть поверати результат, (їх результат записується у глобальну змінну без назви "." ). 
		Якщо створити послідовні функції, прописавши їх у масиві ( ["math/sum", "math/sqrt"] ), чи ( ["math/sum", "/sqrt"] ) якщо функції з однієї папки,
		то кожна наступна функція буде використовувати результат минулої функції як вхідне значення (аргумент).
		Аргументи також можна передати безпосередньо у функцію, для цього треба записати функцію як масив ( "math/sum"  ->  ["math/sum", 3, 6] ),
		передавши у функцію "math/sum" два значення 3 і 6.
			Можна використовувати змінні, щоб записувати у них результат функцій, наприклад ([".a", "math/sum", 3, 6]), крапка перед ім'ям змінної обов'язкова.
																							(ми записуємо у змінну ".a" результат функції)
			Щоб у аргументі передати змінну, треба задавати її як вхідне значення функції ( ["/sqrt", ".a"] ),
				(інакше наступна функція буде використовувати повернутий результат минулої фунцкії).
			Крапка перед назвою змінної вказує на головний вузол ".", у якому знаходяться всі інші змінні. Сам цей вузол "." має в собі результат минулої функції,
			тобто у функцію можна передати і просто ".", наприклад ( ["math/sum", 4, "."] ), ми передаємо у "math/sum" 4 і результат минулої функції.
				Змінну можна використовувати як об'єкт, записуючи у ній інші змінні через крапку ( ".a.b" ),
				але одночасно з тим ця змінна зможе зберігати унікальні значення сама по собі ( ".a" == 4, ".a.b" == 6 ). 
				Щоб отримати доступ до членів змінної-об'єкту треба поставити після змінної крапку ( ".a." == {"b": 6, "c": 3} ).

		Значення з return-у* минулого вікна, можна отримати з зарезервованої змінної ".return", чи з "." якщо це перша функція у послідовності,
			(у функцію без аргументів теж буде пепедаватися return ) 

"return"
	-	Передає значення наступному вікну.
		Передає будь-які числа, строки і об'єкти у наступне вікно,
		також можна передати результат функції через  "%.", чи будь-яку змінну  "%.a".
		Можна сувміщати текст і змінні ( "result: %.a" )


"button"
	-	Шлях до шаблону кнопки
		Отримати шаблон кнопки можна за назвою  ( "ok" ), якщо вона зберігається у глобальній папці "buttons",
		так само і по шляху  ( "menu/setting" )

		Шаблон кнопки має всі характеристики звичайної кнопки, яка створюється безпосередньо у вікні,
		але якщо при створені кнопки за шаблоном, будуть дописані інші налаштування цієї кнопки, вони замінять ориганільні налаштування 


"image"
	-	Вказує шлях до зображення.
		Треба вказати шлях до зображення ( "doors/door3.jpg" )




					ВИГЛЯД БАЗИ ДАНИХ
* { 
	"windows": {},
	"text": {
		"ua" : {},
		"eng": {
			"hello": ""
		},
		"pl" : {},
	},
	"buttons": {},
	"func": {},
	"user": {
		"name": "",
	}
}


				ПРИКЛАД СТРУКТУРИ ОДНОГО ВІКНА

{
    "nameWindow": {
    	"text" : "",
    	"howOpen": "",	//	add, change, delete
    	"func": "gen",	//							-		запускає функцію при відкритті вікна, наприклад генерує кнопки 
    	"buttons" : [
    		{
    			"text" : "Hello!",  // 	%/lang/hello.							-		використання шаблонів фраз, шукаючи їх по папках через %/, крапка в кінці
    			"goTo" : "window1", //	/back      								-		повертає на минуле вікно.
    			"func" : "sum",		//	math/sum   ["math/sum", "math/sqrt"]	-		пошук функцій по папках.  Декілька послідовних функцій за раз
    			"return" : "23"		//	%/func									-		повертає результат функцій
    		},
    		[							//					-		строчка кнопок
    			{
    				"button": "cancel"	//					-		шаблон кнопки, потрібно щоб не створювати кнопки декілька разів
    			},
    			{
    				"button": "ok",		//					-		шаблон кнопки, але у неї ігноруються параментри "goTo" i "func", бо
    				"goTo": "window2",	//					-		ми задаємо "goTo" і
    				"func": "accept"	//					-		задаємо "func"
    			}
    		]
    	],
    	"image": "img1.png"
    },
}